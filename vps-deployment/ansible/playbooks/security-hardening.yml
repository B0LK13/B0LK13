---
- name: VPS Security Hardening
  hosts: vps_servers
  become: yes
  gather_facts: yes
  vars:
    admin_user: "{{ vault_admin_user | default('admin') }}"
    ssh_port: "{{ vault_ssh_port | default(22) }}"
    allowed_users: "{{ vault_allowed_users | default(admin_user) }}"
    fail2ban_bantime: 3600
    fail2ban_findtime: 600
    fail2ban_maxretry: 3

  pre_tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

  tasks:
    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - htop
          - vim
          - ufw
          - fail2ban
          - unattended-upgrades
          - apt-listchanges
        state: present

    - name: Create admin user
      user:
        name: "{{ admin_user }}"
        shell: /bin/bash
        groups: sudo
        append: yes
        create_home: yes
        state: present

    - name: Create .ssh directory for admin user
      file:
        path: "/home/{{ admin_user }}/.ssh"
        state: directory
        owner: "{{ admin_user }}"
        group: "{{ admin_user }}"
        mode: '0700'

    - name: Add SSH public key for admin user
      authorized_key:
        user: "{{ admin_user }}"
        key: "{{ vault_ssh_public_key }}"
        state: present
      when: vault_ssh_public_key is defined

    - name: Configure SSH security
      template:
        src: sshd_config.j2
        dest: /etc/ssh/sshd_config
        backup: yes
        owner: root
        group: root
        mode: '0644'
      notify: restart ssh

    - name: Create SSH banner
      copy:
        content: |
          ***************************************************************************
                                  AUTHORIZED ACCESS ONLY
          ***************************************************************************
          This system is for authorized users only. All activities are monitored
          and logged. Unauthorized access is strictly prohibited and will be
          prosecuted to the full extent of the law.
          ***************************************************************************
        dest: /etc/ssh/banner
        owner: root
        group: root
        mode: '0644'

    - name: Configure UFW firewall defaults
      ufw:
        direction: "{{ item.direction }}"
        policy: "{{ item.policy }}"
      loop:
        - { direction: 'incoming', policy: 'deny' }
        - { direction: 'outgoing', policy: 'allow' }

    - name: Configure UFW firewall rules
      ufw:
        rule: allow
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
        comment: "{{ item.comment }}"
      loop:
        - { port: "{{ ssh_port }}", proto: 'tcp', comment: 'SSH' }
        - { port: '80', proto: 'tcp', comment: 'HTTP' }
        - { port: '443', proto: 'tcp', comment: 'HTTPS' }

    - name: Enable UFW firewall
      ufw:
        state: enabled

    - name: Configure Fail2ban
      template:
        src: jail.local.j2
        dest: /etc/fail2ban/jail.local
        owner: root
        group: root
        mode: '0644'
      notify: restart fail2ban

    - name: Configure automatic security updates
      template:
        src: 50unattended-upgrades.j2
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        owner: root
        group: root
        mode: '0644'

    - name: Enable automatic updates
      copy:
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Unattended-Upgrade "1";
          APT::Periodic::AutocleanInterval "7";
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        owner: root
        group: root
        mode: '0644'

    - name: Configure kernel security parameters
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/99-security.conf
      loop:
        # IP Spoofing protection
        - { name: 'net.ipv4.conf.default.rp_filter', value: '1' }
        - { name: 'net.ipv4.conf.all.rp_filter', value: '1' }
        # Ignore ICMP redirects
        - { name: 'net.ipv4.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv6.conf.all.accept_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_redirects', value: '0' }
        - { name: 'net.ipv6.conf.default.accept_redirects', value: '0' }
        # Ignore send redirects
        - { name: 'net.ipv4.conf.all.send_redirects', value: '0' }
        - { name: 'net.ipv4.conf.default.send_redirects', value: '0' }
        # Disable source packet routing
        - { name: 'net.ipv4.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv6.conf.all.accept_source_route', value: '0' }
        - { name: 'net.ipv4.conf.default.accept_source_route', value: '0' }
        - { name: 'net.ipv6.conf.default.accept_source_route', value: '0' }
        # Log Martians
        - { name: 'net.ipv4.conf.all.log_martians', value: '1' }
        - { name: 'net.ipv4.conf.default.log_martians', value: '1' }
        # Ignore ICMP ping requests
        - { name: 'net.ipv4.icmp_echo_ignore_all', value: '1' }
        # Ignore Directed pings
        - { name: 'net.ipv4.icmp_echo_ignore_broadcasts', value: '1' }
        # TCP SYN flood protection
        - { name: 'net.ipv4.tcp_syncookies', value: '1' }
        - { name: 'net.ipv4.tcp_max_syn_backlog', value: '2048' }
        - { name: 'net.ipv4.tcp_synack_retries', value: '2' }
        - { name: 'net.ipv4.tcp_syn_retries', value: '5' }

    - name: Disable unused network protocols
      copy:
        content: |
          # Disable rare network protocols
          install dccp /bin/true
          install sctp /bin/true
          install rds /bin/true
          install tipc /bin/true
        dest: /etc/modprobe.d/blacklist-rare-network.conf
        owner: root
        group: root
        mode: '0644'

    - name: Set timezone
      timezone:
        name: "{{ timezone | default('UTC') }}"

    - name: Configure logrotate for system logs
      copy:
        content: |
          /var/log/auth.log {
              weekly
              missingok
              rotate 52
              compress
              delaycompress
              notifempty
              create 640 root adm
              postrotate
                  /usr/lib/rsyslog/rsyslog-rotate
              endscript
          }
        dest: /etc/logrotate.d/auth
        owner: root
        group: root
        mode: '0644'

    - name: Install and configure chrony for time synchronization
      apt:
        name: chrony
        state: present

    - name: Configure chrony
      copy:
        content: |
          pool 2.debian.pool.ntp.org iburst
          driftfile /var/lib/chrony/drift
          makestep 1.0 3
          rtcsync
        dest: /etc/chrony/chrony.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart chrony

    - name: Ensure services are enabled and started
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - ssh
        - ufw
        - fail2ban
        - chrony

  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted

    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted

    - name: restart chrony
      systemd:
        name: chrony
        state: restarted

  post_tasks:
    - name: Display security hardening summary
      debug:
        msg:
          - "Security hardening completed successfully!"
          - "SSH port: {{ ssh_port }}"
          - "Admin user: {{ admin_user }}"
          - "Firewall: Enabled with UFW"
          - "Fail2ban: Configured and running"
          - "Automatic updates: Enabled"
          - "IMPORTANT: Test SSH connection before closing this session!"
